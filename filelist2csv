#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

require 'pp'
require 'csv'

# usage: ruby #{$0} [目录名]

# 输入为包含图书文件夹的目录
# 脚本会发现该目录中的所有图书目录并生成这些目录包含图片文件(jpg/jpeg/png)文件的csv列表
# 列表也会存在输入目录中
# 输出文件名称为 import.csv

DEBUG = nil
(puts "\n usage: ruby #{$0} [目录名] \n "; exit;) unless ARGV.size == 1

input_folder = File.expand_path ARGV[0] 
p input_folder if DEBUG # 最后没有斜扛

# 首先清除上次遗留的删除，因为这回用的是追加 append
File.delete('import.csv') if File.exist?('import.csv')

SUFFIX = /\.(jpg|jpeg|png)/i

Dir.chdir input_folder # 我们换目录啦！

book_dirs = Dir.glob("*").select { |file| File.directory? file}

csv_header = '"isbn", "number", "image"'

File.open('import.csv', 'w') do |f|
  f.puts csv_header
end # 我只能这样先增加csv header，因为后面是append模式，如果后面增加header就会增加n次

book_dirs.each do |dir|
  csv_array = []
  book_contents = Dir.entries(dir).select { |f| f =~ SUFFIX}
  book_contents.sort!
  book_name = dir
  book_contents.each_with_index { |img, idx| csv_array << [book_name, idx+1, img] }
  CSV.open("import.csv", "a", :force_quotes => true,) do |csv|
    csv_array.each {|line| csv << line}
  end
end

line_number = File.readlines('import.csv').size

outfile_with_path =  File.expand_path('import.csv')
puts "\n\n您要的文件生成好了，在#{outfile_with_path}。\n\n 一共有#{line_number -1}条数据。\n\n请查看。\n\n"


